<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
<style>

    .node circle
    {
      cursor: pointer;
      fill: #fff;
      stroke: steelblue;
      stroke-width: 1.5px;
    }

    .node text
    {
      font-size: 11px;
    }

    path.link
    {
      fill: none;
      stroke: #ccc;
      stroke-width: 1.5px;
    }

</style>
<body>
<div id="tree">
</div>
</body>
<script type="text/javascript" src="http://d3js.org/d3.v3.js"></script>
<script>

    var assestEntityName = decodeURI(window.location.href.split('/')[window.location.href.split('/').length-1]);
    d3.json(assestEntityName + "?f=d3", function(error, root) {
        var m = [20, 20, 20, 20],
                w = 1400 - m[1] - m[3],
                h = 1000 - m[0] - m[2],
                i = 0,
                r = 800,
                x = d3.scale.linear().domain([0, w]).range([0, w]),
                y = d3.scale.linear().domain([0, h]).range([0, h]);

            var vis = d3.select("body").append("svg:svg")
                          .attr("viewBox", "-200 0 1200 1000")
                          .attr("width", w + m[1] + m[3])
                          .attr("height", h + m[0] + m[2])
                          .append("svg:g")
                          //.attr("pointer-events", "all")
                          .attr("transform", "translate(" + m[3] + "," + m[0] + ")")
                          //.call(d3.behavior.zoom().scaleExtent([1,8]).on("zoom",zoom));
                          .call(d3.behavior.zoom().x(x).y(y).scaleExtent([0,3]).on("zoom",zoom));

            vis.append("rect")
                .attr("class", "overlay")
                .attr("width", w + m[1] + m[3])
                .attr("height", h + m[0] + m[2])
                .attr("opacity", 0);

            var layout = d3.layout.cluster()
                .size([h, w]);

            layout.children(function(d){
                return d.children;
            });

            layout.sort(function comparator(a, b) {
                if(a.parent.name !== ''){
                    return d3.ascending(a.name, b.name);
                }
            });

            var diagonal = d3.svg.diagonal()
                .projection(function(d) { return [d.y, d.x]; });

            root.x0 = h / 2;
            root.y0 = 0;

            function toggleAll(d) {
              if (d.children) {
                  d.children.forEach(toggleAll);
                  toggle(d);
              }
            };
            console.log(root)

            // initialize the display to show a few nodes.
            root.children.forEach(toggleAll);
            //toggle(root.children[1]);
            //toggle(root.children[9]);

            update(root);

            function update(source) {
                var duration = d3.event && d3.event.altKey ? 5000: 500;

                // Compute the new tree layout.
                var nodes = layout.nodes(root).reverse();

                // Normalize for fixed-depth.
                nodes.forEach(function (d) { d.y = d.depth * 180; });

                // Update the nodes...
                var node = vis.selectAll("g.node")
                    .data(nodes, function(d) { return d.id || (d.id = ++i); });

                // Enter any new nodes at the parent's previous position.
                var nodeEnter = node.enter().append("svg:g")
                    .attr("class", "node")
                    .attr("transform", function(d) {return "translate(" + source.y0 + "," + source.x0 + ")"; })
                    .on("click", function(d) {
                        toggle(d);
                        update(d);
                        d.children.forEach(function(node){
                            if (node.name === ''){
                              toggle(node);
                              update(node);
                            }
                        });
                    });

                nodeEnter.append("svg:circle")
                    .attr("r", 1e-6)
                    .style("fill", function(d) { return d._children ? "lightsteelblue" : "#fff"; });

                nodeEnter.append("svg:text")
                    //.attr("y", function(d) { return d.children || d._children ? -10 : 10; })
                    //.attr("dx", ".35em")
                    .attr("x", function(d) { 
                        if (d.depth === 0){
                            return -10; 
                        }else{
                            return d.children || d._children ? 10 : -10;
                        }                     
                    })
                    .attr("y", function(d) { 
                        if (d.depth === 0){
                            return 0; 
                        }else{
                            if (Math.max((d.children || []).length, (d._children || []).length) > 0){
                                return -10;
                            }else{
                                return 0; 
                            }                      
                        }

                    })
                    .attr("dy", ".35em")
                    .attr("text-anchor", function(d) { 
                        if (d.depth === 0){
                            return "end"; 
                        }else{
                            return "start";                           
                        }

                    })
                    .text(function(d) { return d.name; })
                    .style("fill-opacity", 1e-6);

                // Transition nodes to their new position.
                var nodeUpdate = node.transition()
                    .duration(duration)
                    .attr("transform", function(d) { return "translate(" + d.y + "," + d.x + ")"; });

                nodeUpdate.select("circle")
                    .attr("r", 4.5)
                    .style("fill", function(d) { return d._children ? "lightsteelblue" : "#fff"; });

                nodeUpdate.select("text")
                    .style("fill-opacity", 1);

                // Transition exiting ndoes to the parent's new position.
                var nodeExit = node.exit().transition()
                    .duration(duration)
                    .attr("transform", function(d) { return "translate(" + source.y + "," + source.x + ")"; })
                    .remove();

                nodeExit.select("circle")
                    .attr("r", 1e-6);
                nodeExit.select("text")
                    .style("fill-opacity", 1e-6);

                // Update the links...
                var link = vis.selectAll("path.link")
                    .data(layout.links(nodes), function(d) { return d.target.id; });

                // Enter any new links at hte parent's previous position
                link.enter().insert("svg:path", "g")
                    .attr("class", "link")
                    .attr("d", function(d) {
                      var o = {x: source.x0, y: source.y0};
                      return diagonal({source: o, target: o});
                    })
                    .transition()
                      .duration(duration)
                      .attr("d", diagonal);

                // Transition links to their new position.
                link.transition()
                    .duration(duration)
                    .attr("d", diagonal);

                // Transition exiting nodes to the parent's new position.
                link.exit().transition()
                    .duration(duration)
                    .attr("d", function(d) {
                      var o = {x: source.x, y: source.y};
                      return diagonal({source: o, target: o});
                    })
                    .remove();

                // Stash the old positions for transition.
                nodes.forEach(function(d) {
                  d.x0 = d.x;
                  d.y0 = d.y;
                });

            }

            // Toggle children
            function toggle(d) {
                if (d.children) {
                  d._children = d.children;
                  d.children = null;
                }
                else {
                  d.children = d._children;
                  d._children = null;
                }
            }

            // zoom in / out
            function zoom(d) {
                //vis.attr("transform", "translate(" + d3.event.translate + ")scale(" + d3.event.scale + ")");
                var nodes = vis.selectAll("g.node");
                nodes.attr("transform", transform);

                // Update the links...
                var link = vis.selectAll("path.link");
                link.attr("d", translate);

                // Enter any new links at hte parent's previous position
                //link.attr("d", function(d) {
                //      var o = {x: d.x0, y: d.y0};
                //      return diagonal({source: o, target: o});
                //    });
            }

            function transform(d) {
                return "translate(" + x(d.y) + "," + y(d.x) + ")";
            }

            function translate(d) {
                var sourceX = x(d.target.parent.y);
                var sourceY = y(d.target.parent.x);
                var targetX = x(d.target.y);
                var targetY = (sourceX + targetX)/2;
                var linkTargetY = y(d.target.x0);
                var result = "M"+sourceX+","+sourceY+" C"+targetX+","+sourceY+" "+targetY+","+y(d.target.x0)+" "+targetX+","+linkTargetY+"";
                //console.log(result);

               return result;
            }

    });

</script>
</html>